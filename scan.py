from domxss import dom
from requester import requester
import argparse
from utils import extractHeaders
import base64 as b64
import re



def base64(string):
    if re.match(r'^[A-Za-z0-9+\/=]+$', string) and (len(string) % 4) == 0:
        return b64.b64decode(string.encode('utf-8')).decode('utf-8')
    else:
        return b64.b64encode(string.encode('utf-8')).decode('utf-8')

parser = argparse.ArgumentParser()
args = parser.parse_args()
target = args.target
path = args.path
jsonData = args.jsonData
paramData = args.paramData
encode = args.encode
fuzz = args.fuzz
update = args.update
timeout = args.timeout
proxy = args.proxy
recursive = args.recursive
args_file = args.args_file
args_seeds = args.args_seeds
level = args.level
add_headers = args.add_headers
threadCount = args.threadCount
delay = args.delay
skip = args.skip
skipDOM = args.skipDOM
blindXSS = args.blindXSS
encoding = base64 if encode and encode == 'base64' else False

# if type(args.add_headers) == bool:
#     headers = extractHeaders(prompt())
# elif type(args.add_headers) == str:
#     headers = extractHeaders(args.add_headers)
# else:
from config import headers

def scan(target, paramData, encoding, headers, delay, timeout, skipDOM, skip):
    GET, POST = (False, True) if paramData else (True, False)
    # If the user hasn't supplied the root url with http(s), we will handle it
    if not target.startswith('http'):
        try:
            response = requester('https://' + target, {},
                                 headers, GET, delay, timeout)
            target = 'https://' + target
        except:
            target = 'http://' + target
    print('Scan target: {}'.format(target))
    response = requester(target, {}, headers, GET, delay, timeout).text
    print('Checking for DOM vulnerabilities')
    highlighted = dom(response)
    print(highlighted)

scan(target, paramData, encoding, headers, delay, timeout, skipDOM, skip)