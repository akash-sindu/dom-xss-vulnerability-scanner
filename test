import re
import requests
import random
url = "http://www.itsecgames.com/"
# from core.utils import isBadContext, equalize, escaped, extractScripts

xsschecker = "v3dm0s"
def htmlParser():

    headers = {  # default headers
    'User-Agent': '$',
    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
    'Accept-Language': 'en-US,en;q=0.5',
    'Accept-Encoding': 'gzip,deflate',
    'Connection': 'close',
    'DNT': '1',
    'Upgrade-Insecure-Requests': '1',
}
    user_agents = ['Mozilla/5.0 (X11; Linux i686; rv:60.0) Gecko/20100101 Firefox/60.0',
                'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.113 Safari/537.36',
                'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36 OPR/43.0.2442.991']

    if 'User-Agent' not in headers:
        headers['User-Agent'] = random.choice(user_agents)
    elif headers['User-Agent'] == '$':
        headers['User-Agent'] = random.choice(user_agents)
    resp =  requests.get(url= url, params={}, headers=headers, verify=True, timeout=7)
    rawResponse = resp
    response = resp.text  # response content
    reflections = response.count(xsschecker)
    print(reflections)
    position_and_context = {}
    environment_details = {}
    clean_response = re.sub(r'<!--[.\s\S]*?-->', '', response)
    script_checkable = clean_response
    def extractScripts(response):
        scripts = []
        matches = re.findall(r'(?s)<script.*?>(.*?)</script>', response.lower())
        print(matches)
        for match in matches:
            if xsschecker in match:
                scripts.append(match)
        return scripts
    
    for script in extractScripts(script_checkable):
        print(script)
    #     occurences = re.finditer(r'(%s.*?)$' % xsschecker, script)
    #     if occurences:
    #         for occurence in occurences:
    #             thisPosition = occurence.start(1)
    #             position_and_context[thisPosition] = 'script'
    #             environment_details[thisPosition] = {}
    #             environment_details[thisPosition]['details'] = {'quote' : ''}
    #             for i in range(len(occurence.group())):
    #                 currentChar = occurence.group()[i]
    #                 if currentChar in ('/', '\'', '`', '"') and not escaped(i, occurence.group()):
    #                     environment_details[thisPosition]['details']['quote'] = currentChar
    #                 elif currentChar in (')', ']', '}', '}') and not escaped(i, occurence.group()):
    #                     break
    #             script_checkable = script_checkable.replace(xsschecker, '', 1)
    # if len(position_and_context) < reflections:
    #     attribute_context = re.finditer(r'<[^>]*?(%s)[^>]*?>' % xsschecker, clean_response)
    #     for occurence in attribute_context:
    #         match = occurence.group(0)
    #         thisPosition = occurence.start(1)
    #         parts = re.split(r'\s', match)
    #         tag = parts[0][1:]
    #         for part in parts:
    #             if xsschecker in part:
    #                 Type, quote, name, value = '', '', '', ''
    #                 if '=' in part:
    #                     quote = re.search(r'=([\'`"])?', part).group(1)
    #                     name_and_value = part.split('=')[0], '='.join(part.split('=')[1:])
    #                     if xsschecker == name_and_value[0]:
    #                         Type = 'name'
    #                     else:
    #                         Type = 'value'
    #                     name = name_and_value[0]
    #                     value = name_and_value[1].rstrip('>').rstrip(quote).lstrip(quote)
    #                 else:
    #                     Type = 'flag'
    #                 position_and_context[thisPosition] = 'attribute'
    #                 environment_details[thisPosition] = {}
    #                 environment_details[thisPosition]['details'] = {'tag' : tag, 'type' : Type, 'quote' : quote, 'value' : value, 'name' : name}
    # if len(position_and_context) < reflections:
    #     html_context = re.finditer(xsschecker, clean_response)
    #     for occurence in html_context:
    #         thisPosition = occurence.start()
    #         if thisPosition not in position_and_context:
    #             position_and_context[occurence.start()] = 'html'
    #             environment_details[thisPosition] = {}
    #             environment_details[thisPosition]['details'] = {}
    # if len(position_and_context) < reflections:
    #     comment_context = re.finditer(r'<!--[\s\S]*?(%s)[\s\S]*?-->' % xsschecker, response)
    #     for occurence in comment_context:
    #         thisPosition = occurence.start(1)
    #         position_and_context[thisPosition] = 'comment'
    #         environment_details[thisPosition] = {}
    #         environment_details[thisPosition]['details'] = {}
    # database = {}
    # for i in sorted(position_and_context):
    #     database[i] = {}
    #     database[i]['position'] = i
    #     database[i]['context'] = position_and_context[i]
    #     database[i]['details'] = environment_details[i]['details']

    # bad_contexts = re.finditer(r'(?s)(?i)<(style|template|textarea|title|noembed|noscript)>[.\s\S]*(%s)[.\s\S]*</\1>' % xsschecker, response)
    # non_executable_contexts = []
    # for each in bad_contexts:
    #     non_executable_contexts.append([each.start(), each.end(), each.group(1)])

    # if non_executable_contexts:
    #     for key in database.keys():
    #         position = database[key]['position']
    #         badTag = isBadContext(position, non_executable_contexts)
    #         if badTag:
    #             database[key]['details']['badTag'] = badTag
    #         else:
    #             database[key]['details']['badTag'] = ''
    # return database

htmlParser()